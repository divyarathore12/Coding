median of two sorted array (IMP)

concept
--------
if we want to find number > given number(target);
if(nums[mid]>target)
{
  end=mid-1;
}
else
{
  start=mid+1;
}
and return start for this

case 2:
when number < target

if(nums[mid]<target)
{
 start=mid+1;
}
else
{
end=mid-1;
}
return end;
------------------------------------------------------------------------------------------------------------------------------------

MEET IN MIDDLE:-
this algorithm mostly applied on [30,45] size array] in this we find sum of all sizes of subset but now we are divding array into two partition 
let suppose arr= [1,3,4,5]
so now N=arr.size()/2;
arr1=[1,3]
arr2=[4,5]
now we make all subset so that will 1---size(1),3---1,4---1,0--0    array1
arr2 all subset sum 4----1,5----1,0----0,9----2
now let suppose we have to sum a subset whose sum=10
then what we will do we sort array2 via each size wise so now [4,5][0][9]
now if we are taking size 1 subset from arr1 
let taking size  1 subset from arr1 so now we can iterate all over remaining sizes in array2
so remaining size is 3 but we will start loop from i=1 so size will be 2
so now let iterate over array2 and find arr2 of size 2 then we will get 9
so now do total sum and it is 9+1=10 so this is our ans


code:

void calculateSubSet(int i,int currSum,int len,int n,vector<int>&nums,vector<vector<int>>&arr){
if(i==n){
arr[len].push(currSum);
}
calculateSubSet(i+1,currSum+nums[i],len+1,nums,arr);
calculateSubSet(i+1,currSum,len,nums,arr);
}

int targetSum
QUESTION : https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/
